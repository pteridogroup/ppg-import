---
title: "PPG"
format:
  gfm:
    toc: false
    wrap: none
params:
  tax_level: "species"
execute: 
  echo: false
  message: false
  warning: false
---

```{r}
#| label: setup
source(here::here("R/packages.R"))
source(here::here("R/functions.R"))
conflicted::conflict_prefer("filter", "dplyr")

tar_load(ppg)
tar_load(rank_by_num)

dwctaxon::dct_options(
      # - won't error on duplicated sci names
      check_sci_name = FALSE,
      valid_tax_status = "accepted, synonym, ambiguous synonym, variant",
      skip_missing_cols = TRUE,
      extra_cols = c(
        "ipniURL", "tribe", "modified", "modifiedBy", "modifiedByID")
    )
```

```{r}
#| label: headers
#| results: asis

# WF order
# number sci_name • year ÷ publication °rank
# @vernacular
# %taxon_remarks
# synonyms 

ppg <- join_higher_taxa(ppg) %>% 
  select(-matches("ipni|modified"))

# Load DWC data according to tax_level parameter
if (params$tax_level == "species") {
  invisible()
} else if (params$tax_level == "genus") {
  ppg <- filter_to_genus(ppg)
} else {
  stop("Markdown parameter 'tax_level' must be 'species' or 'genus'")
}

# Sort data for writing out taxonomic treatment
ppg <- 
  ppg %>%
  sort_wf_dwc(rank_by_num)

# Format genera to be italics
genus_and_lower <- c("genus", "species", "variety", "subvariety", "form", "subspecies", "subvariety")

ppg <-
  ppg |>
  mutate(
    scientificName = case_when(
      # Italicize first part of name for genus and below if not nothotaxon
      taxonRank %in% genus_and_lower & !str_detect(scientificName, "^× ") ~
        str_replace(scientificName, "^(\\w+)", "*\\1*"),
      # Italicize part after × for nothotaxa
      str_detect(scientificName, "^× ") ~
        str_replace(scientificName, "^× (\\w+)", "× *\\1*"),
      .default = scientificName
    )
  ) 

# Need to add spacers between each accepted name
spacers <-
  ppg %>%
  filter(taxonomicStatus == "accepted") %>%
  transmute(taxonID, spacer = TRUE, sort_order = sort_order - 0.5)

headers <-
  ppg %>%
  filter(taxonomicStatus == "accepted") %>%
  mutate(name_txt = glue("{scientificName} \\-\\- {namePublishedIn}")) %>%
  mutate(
     header = case_when(
       taxonRank == "order" ~ md_heading(name_txt, 2),
       taxonRank == "family" ~ md_heading(name_txt, 3),
       taxonRank == "subfamily" ~ md_heading(name_txt, 4),
       taxonRank == "tribe" ~ md_heading(name_txt, 5),
       taxonRank == "genus" ~ md_heading(name_txt, 6),
       taxonRank %in% c("species", "form", "variety", "subspecies") ~
         md_bullet(md_hardline(name_txt)),
    )
  ) %>%
  select(taxonID, header, sort_order)

remarks <- ppg %>%
    filter(taxonomicStatus == "accepted", !is.na(taxonRemarks)) %>%
    transmute(
      taxonID,
      note_txt = md_hardline(taxonRemarks), sort_order = sort_order + 0.1)

syns <-
  ppg %>%
  filter(taxonomicStatus == "synonym") %>%
  mutate(
    syn_txt = glue::glue("= {scientificName} \\-\\- {namePublishedIn}")) %>%
  select(taxonID = acceptedNameUsageID, syn_txt) %>%
  group_by(taxonID) %>%
  summarize(syn_txt = list(syn_txt)) %>%
  mutate(syn_txt = map(syn_txt, md_hardline)) %>%
  left_join(
    select(ppg, taxonID, sort_order),
    by = "taxonID"
  ) %>%
  mutate(
    taxonomicStatus = "synonym",
    sort_order = sort_order + 0.2) %>%
  arrange(sort_order)

acc_tax_id <- ppg %>%
  filter(taxonomicStatus == "accepted") %>%
  pull(taxonID)

print_dat <-
  headers %>%
  bind_rows(spacers) %>%
  bind_rows(syns) %>%
  bind_rows(remarks) %>%
  arrange(sort_order) %>%
  select(taxonID, sort_order, everything()) %>%
  # Check that data to print includes all accepted names
  verify(all(acc_tax_id %in% .$taxonID))

for (i in seq_len(nrow(print_dat))) {
  if (isTRUE(print_dat$spacer[[i]])) {
    print(glue::glue(""))
  }
  if (not_missing(print_dat$header[[i]])) {
    print(print_dat$header[[i]])
  }
  if (not_missing(print_dat$syn_txt[[i]])) {
    print(print_dat$syn_txt[[i]])
  }
  if (not_missing(print_dat$note_txt[[i]])) {
    print(print_dat$note_txt[[i]])
  }
}
```
